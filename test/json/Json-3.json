{
  "version": "https://jsonfeed.org/version/1",
  "title": "Jim Nielsen’s Blog",
  "home_page_url": "https://blog.jim-nielsen.com",
  "feed_url": "https://blog.jim-nielsen.com/feed.json",
  "author": { "name": "Jim Nielsen", "url": "https://jim-nielsen.com/" },
  "items": [
    {
      "id": "/2025/sit-on-your-ass-web-dev/",
      "date_published": "2025-08-10T19:00:00Z",
      "title": "Sit On Your Ass Web Development",
      "url": "https://blog.jim-nielsen.com/2025/sit-on-your-ass-web-dev/",
      "tags": [],
      "content_html": "<p>I’ve been <del>reading</del> listening to <a href=\"https://press.stripe.com/poor-charlies-almanack\" ><em>Poor Charlie’s Almanack</em></a> which is a compilation of talks by Charlie Munger, legendary vice-chairman at Berkshire Hathaway.</p>\n<p>One thing Charlie talks about is what he calls “sit on your ass investing” which is the opposite of day trading. Rather than being in the market every day (chasing trends, reacting to fluctuations, and trying to time transactions) Charlie advocates spending most of your time “sitting on your ass”. That doesn’t mean you’re doing nothing. It means that instead of constantly trading you’re spending your time in research and preparation for trading.</p>\n<p>Eventually, a top-tier opportunity will come along and your preparation will make you capable of recognizing it and betting big. <em>That’s when you trade.</em> After that, you’re back to “sitting on your ass”. Trust your research. Trust your choices. Don’t tinker. Don’t micromanage. Don’t panic. Just let the compounding effects of a good choice work in your favor.</p>\n<h2 id=\"day-trading-day-developing\">Day Trading, Day Developing</h2>\n<p>As a day trader your job is to trade daily (it’s right there in the job title). If you’re not trading every day then what are you even doing? Not your job, apparently.</p>\n<p>I think it’s easy to view “development” like this. You’re a developer. Your job is to develop programs — to write code. If you’re not doing that every single day, then what are you even doing?</p>\n<p>From this perspective, it becomes easy to think that writing endless code for ever-changing software paradigms is just how one develops websites.</p>\n<p>But it doesn’t have to be that way. Granted, <a href=\"https://dubroy.com/blog/cold-blooded-software/\" >there’s cold-blooded and warm-blooded software.</a> Sometimes you can’t avoid that.</p>\n<p>But I also think there’s a valuable lesson in Charlie’s insight.   You don’t have to chase “the market” of every new framework or API, writing endless glue code for features that already exist or that will soon exist in browsers. Instead, you can make a few select, large bets on the web platform and then “sit on your ass” until the payoff comes later!</p>\n<h2 id=\"an-example-polyfills\">An Example: Polyfills</h2>\n<p>I think polyfills are a great example of an approach to “sit on your ass” web development. Your job as a developer is to know enough to make a bet on a particular polyfill that aligns with the future of the web platform. Once implemented, all you have to do is sit on your ass while other really smart people who are building browsers do their part to ship the polyfilled feature in the platform. Once shipped, you “sell” your investment by stripping out the polyfill and reap the reward of having your application get lighter and faster with zero additional effort.</p>\n<p>A big part of the payoff is in the waiting — in the “sitting on your ass”. You make a smart bet, then you sit patiently while others run around endlessly writing and rewriting more code (meanwhile the only thing left for you will be to delete code).</p>\n<p>Charlie’s business partner Warren Buffett once said that it’s “better to buy a wonderful company at a fair price, than a fair company at a wonderful price”. Similarly, I’d say it’s better to build on a polyfill aligned with the future of the platform than to build on a framework re-inventing a feature of the platform.</p>\n<h2 id=\"get-out-of-your-own-way\">Get Out Of Your Own Way</h2>\n<p>Want to do “Day Trading Development”?</p>\n<ul>\n<li>Jump tools and frameworks constantly — “The next one will solve all our problems!”</li>\n<li>Build complex, custom solutions that duplicate work the web  platform is already moving towards solving.</li>\n<li>Commit code that churns with time, rather than compounds with it.</li>\n</ul>\n<p>Want to do “Sit on Your Ass Development”?</p>\n<ul>\n<li>Do the minimum necessary to bridge the gap until browsers catch up.</li>\n<li>Build on forward-facing standards, then sit back and leverage the compounding effects of browser makers and standards bodies that iteratively improve year over year (none of whom you have to pay).</li>\n<li>As <a href=\"https://notes.jim-nielsen.com/#2025-07-18T0946\" >Alex Russel recommends</a>, spend as little time as possible in your own code and instead focus on glueing together “the big C++/Rust subsystems” of the browser.</li>\n</ul>\n<p>In short: spend less time glueing together tools and frameworks <em>on top of</em> the browser, and more time bridging tools and APIs <em>inside of the browser</em>. Then get out of your own way and go sit on your ass. You might find yourself more productive than ever!</p>\n<h2 id=\"update-2025-08-11\">Update: 2025-08-11</h2>\n<p><a href=\"https://bsky.app/profile/davatron5000.bsky.social/post/3lw4vg2eo7k2w\" >Dave Rupert mentioned</a> which web platform features he’s jumping on the bandwagon for:</p>\n<ul>\n<li>view transitions</li>\n<li>scroll-driven animations</li>\n<li>popover</li>\n<li>masonry</li>\n<li>web components</li>\n<li>carousels</li>\n</ul>\n<p>And I would add to that my own (at the time of this writing):</p>\n<ul>\n<li>http imports / importmaps</li>\n<li>css / json modules</li>\n<li>URLPattern</li>\n<li>css nesting</li>\n<li>relative color syntax</li>\n<li>HTML INCLUDES!</li>\n</ul>\n\n    <hr />\n    \n\n    <p>\n      Reply via:\n      \n\n      <a\n        href=\"mailto:jimniels%2Bblog@gmail.com?subject=Re:%20blog.jim-nielsen.com/2025/sit-on-your-ass-web-dev/\"\n        >Email</a\n      >\n      · <a href=\"https://mastodon.social/@jimniels\">Mastodon</a> ·\n\n      <a href=\"https://bsky.app/profile/jim-nielsen.com\">Bluesky</a>\n    </p>\n\n    \n  "
    },
    {
      "id": "/2025/writing-blog-posts-and-songs/",
      "date_published": "2025-08-06T19:00:00Z",
      "title": "Writing: Blog Posts and Songs",
      "url": "https://blog.jim-nielsen.com/2025/writing-blog-posts-and-songs/",
      "tags": [],
      "content_html": "<p>I was listening to <a href=\"https://www.pushkin.fm/podcasts/broken-record/jackson-browne\" >a podcast interview with the Jackson Browne</a> (American singer/songwriter, political activist, and inductee into the Rock and Roll Hall of Fame) and the interviewer asks him how he approaches writing songs with social commentaries and critiques — something along the lines of: “How do you get from the <em>New York Times</em> headline on a social subject to the emotional heart of a song that matters to each individual?”</p>\n<p>Browne discusses how if you’re too subtle, people won’t know what you’re talking about. And if you’re too direct, you run the risk of making people feel like they’re being scolded. Here’s what he says about his songwriting:</p>\n<blockquote>\n<p>I want this to sound like you and I were drinking in a bar and we’re just talking about what’s going on in the world. Not as if you’re at some elevated place and lecturing people about something they should know about but don’t but [you think] they should care. You have to get to people where [they are, where] they do care and where they do know. </p>\n</blockquote>\n<p>I think that’s a great insight for anyone looking to have a connecting, effective voice. I know for me, it’s really easily to slide into a lecturing voice — you “should” do this and you “shouldn’t” do that.</p>\n<p>But I like Browne’s framing of trying to have an informal, conversational tone that meets people where they are. Like you’re discussing an issue in the bar, rather than listening to a sermon.</p>\n<p>Chris Coyier is the canonical example of this that comes to mind. I still think of <a href=\"https://css-tricks.com/separate-form-submit-buttons-go-different-urls/\" >this post from CSS Tricks</a> where Chris talks about how to have submit buttons that go to different URLs:</p>\n<blockquote>\n<p>When you submit that form, it’s going to go to the URL <code>/submit</code>. Say you need another submit button that submits to a different URL. It doesn’t matter why. There is always a reason for things. The web is a big place and all that.</p>\n</blockquote>\n<p>He doesn’t conjure up some universally-applicable, justified rationale for why he’s sharing this method. Nor is there any pontificating on why this is “good” or “bad”. Instead, like most of Chris’ stuff, I read it as a humble acknowledgement of the practicalities at hand — “Hey, the world is a big place. People have to do crafty things to make their stuff work. And if you’re in that situation, here’s something that might help what ails ya.”</p>\n<p>I want to work on developing that kind of a voice because I love reading voices like that.</p>\n\n    <hr />\n    \n\n    <p>\n      Reply via:\n      \n\n      <a\n        href=\"mailto:jimniels%2Bblog@gmail.com?subject=Re:%20blog.jim-nielsen.com/2025/writing-blog-posts-and-songs/\"\n        >Email</a\n      >\n      · <a href=\"https://mastodon.social/@jimniels\">Mastodon</a> ·\n\n      <a href=\"https://bsky.app/profile/jim-nielsen.com\">Bluesky</a>\n    </p>\n\n    \n  "
    },
    {
      "id": "/2025/href-value-possibilities/",
      "date_published": "2025-08-03T19:00:00Z",
      "title": "A Few Things About the Anchor Element’s href You Might Not Have Known",
      "url": "https://blog.jim-nielsen.com/2025/href-value-possibilities/",
      "tags": ["html"],
      "content_html": "<p>I’ve written previously about <a href=\"https://blog.jim-nielsen.com/2023/reloading-document-in-html-and-preserve-query-params/\" >reloading a document using only HTML</a> but that got me thinking: What are all the values you can put in an anchor tag’s <code>href</code> attribute?</p>\n<p>Well, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/a#href\" >I looked around</a>. I found some things I already knew about, e.g.</p>\n<ul>\n<li>Link protocols like <code>mailto:</code>, <code>tel:</code>, <code>sms:</code> and <code>javascript:</code> which deal with specific ways of handling links.</li>\n<li>Protocol-relative links, e.g. <code>href=&quot;//&quot;</code></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/URI/Reference/Fragment/Text_fragments\" >Text fragments</a> for linking to specific pieces of text on a page, e.g. <code>href=&quot;#:~:text=foo&quot;</code></li>\n</ul>\n<p>But I also found some things I didn’t know about (or only vaguely knew about) so I wrote them down in an attempt to remember them.</p>\n<h2 id=\"href\">href=&quot;#&quot;</h2>\n<p>Scrolls to the top of a document. I knew that.</p>\n<p>But I’m writing because <code>#top</code> will also scroll to the top <em>if</em> there isn’t another element with <code>id=&quot;top&quot;</code> in the document. I didn’t know that. </p>\n<p>(<a href=\"https://html.spec.whatwg.org/multipage/browsing-the-web.html#scrolling-to-a-fragment\" >Spec</a>: “If <em>decodedFragment</em> is an ASCII case-insensitive match for the string <code>top</code>, then return the top of the document.”)</p>\n<p><strong>Update:</strong> <a href=\"https://mastodon.social/@HTeuMeuLeu/114971342411854119\" >HTeuMeuLeu pointed out to me on Mastodon</a> that you can use <code>#page=</code> to deep-link to a specific page in a PDF, e.g. <code>my-file.pdf#page42</code> would like to page 42 in the file.</p>\n<h2 id=\"href-1\">href=&quot;&quot;</h2>\n<p>Reloads the current page, preserving the search string but removing the hash string (if present).</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>Resolves to</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>/path/</code></td>\n<td><code>/path/</code></td>\n</tr>\n<tr>\n<td><code>/path/#foo</code></td>\n<td><code>/path/</code></td>\n</tr>\n<tr>\n<td><code>/path/?id=foo</code></td>\n<td><code>/path/?id=foo</code></td>\n</tr>\n<tr>\n<td><code>/path/?id=foo#bar</code></td>\n<td><code>/path/?id=foo</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"href-2\">href=&quot;.&quot;</h2>\n<p>Reloads the current page, removing both the search and hash strings (if present).</p>\n<p><strong>Note</strong>: If you’re using <code>href=&quot;.&quot;</code> as a link to the current page, ensure your URLs have a trailing slash or you may get surprising navigation behavior. The path is interpreted as a file, so <code>&quot;.&quot;</code> resolves to the parent directory of the current location.</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>Resolves to</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>/path</code></td>\n<td><code>/</code></td>\n</tr>\n<tr>\n<td><code>/path#foo</code></td>\n<td><code>/</code></td>\n</tr>\n<tr>\n<td><code>/path?id=foo</code></td>\n<td><code>/</code></td>\n</tr>\n<tr>\n<td><code>/path/</code></td>\n<td><code>/path/</code></td>\n</tr>\n<tr>\n<td><code>/path/#foo</code></td>\n<td><code>/path/</code></td>\n</tr>\n<tr>\n<td><code>/path/?id=foo</code></td>\n<td><code>/path/</code></td>\n</tr>\n<tr>\n<td><code>/path/index.html</code></td>\n<td><code>/path/</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"href-3\">href=&quot;?&quot;</h2>\n<p>Reloads the current page, removing both the search and hash strings (if present). <em>However</em>, it preserves the <code>?</code> character.</p>\n<p><strong>Note</strong>: Unlike <code>href=&quot;.&quot;</code>, trailing slashes don’t matter. The search parameters will be removed but the path will be preserved as-is.</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>Resolves to</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>/path</code></td>\n<td><code>/path?</code></td>\n</tr>\n<tr>\n<td><code>/path#foo</code></td>\n<td><code>/path?</code></td>\n</tr>\n<tr>\n<td><code>/path?id=foo</code></td>\n<td><code>/path?</code></td>\n</tr>\n<tr>\n<td><code>/path?id=foo#bar</code></td>\n<td><code>/path?</code></td>\n</tr>\n<tr>\n<td><code>/index.html</code></td>\n<td><code>/index.html?</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"hrefdata\">href=&quot;data:&quot;</h2>\n<p>You can make links that navigate to <a href=\"https://developer.mozilla.org/en-US/docs/Web/URI/Reference/Schemes/data\" >data URLs</a>. The super-readable version of this would be:</p>\n<pre><code class=\"language language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;data:text/plain,hello world&quot;</span>&gt;</span>\n  View plain text data URL\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<p>But you probably want <code>data:</code> URLs to be encoded so you don’t get unexpected behavior, e.g.</p>\n<pre><code class=\"language language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;data:text/plain,hello%20world&quot;</span>&gt;</span>\n  View plain text data URL\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<p>Go ahead and try it (FYI: may not work in your user agent). Here’s a <a href=\"data:text/plain,hello%20world\" target=\"_blank\">plain-text file</a> and an <a href=\"data:text/html,%3Ch1%3Ehello%20world%3C/h1%3E\" target=\"_blank\">HTML file</a>.</p>\n<h2 id=\"hrefvideomp4t1020\">href=&quot;video.mp4#t=10,20&quot;</h2>\n<p><a href=\"https://www.w3.org/TR/media-frags/\" >Media fragments</a> allow linking to specific parts of a media file, like audio or video.</p>\n<p><a href=\"https://indieweb.org/media_fragment\" >For example</a>, <code>video.mp4#t=10,20</code> links to a video. It starts play at 10 seconds, and stops it at 20 seconds.</p>\n<p>(<a href=\"https://caniuse.com/media-fragments\" >Support</a> is limited at the time of this writing.)</p>\n<h2 id=\"see-for-yourself\">See For Yourself</h2>\n<p>I tested a lot of this stuff in the browser and via JS. I think I got all these right.</p>\n<p>Thanks to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\" >JavaScript’s URL constructor</a> (and the ability to pass a <code>base</code> URL), I could programmatically explore how a lot of these href’s would resolve.</p>\n<p>Here’s a snippet of the test code I wrote. You can copy/paste this in your console and they should all pass 🤞</p>\n<pre><code class=\"language language-js\"><span class=\"hljs-keyword\">const</span> assertions = [\n  <span class=\"hljs-comment\">// Preserves search string but strips hash</span>\n  <span class=\"hljs-comment\">// x -&gt; { search: &#x27;?...&#x27;, hash: &#x27;&#x27; }</span>\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;/path&#x27;</span>,               <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">&#x27;/path&#x27;</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;/path/&#x27;</span>,              <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">&#x27;/path/&#x27;</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;/path/#foo&#x27;</span>,          <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">&#x27;/path/&#x27;</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;/path/?id=foo&#x27;</span>,       <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">&#x27;/path/?id=foo&#x27;</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;/path/?id=foo#bar&#x27;</span>,   <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">&#x27;/path/?id=foo&#x27;</span> },\n  \n  <span class=\"hljs-comment\">// Strips search and hash strings</span>\n  <span class=\"hljs-comment\">// x -&gt; { search: &#x27;&#x27;, hash: &#x27;&#x27; }</span>\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;/path&#x27;</span>,              <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">&#x27;/&#x27;</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">`/path#foo`</span>,          <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">`/`</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">`/path?id=foo`</span>,       <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">`/`</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">`/path/`</span>,             <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">`/path/`</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">`/path/#foo`</span>,         <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">`/path/`</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">`/path/?id=foo`</span>,      <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">`/path/`</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">`/path/index.html`</span>,   <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">`/path/`</span> },\n  \n  <span class=\"hljs-comment\">// Strips search parameters and hash string,</span>\n  <span class=\"hljs-comment\">// but preserves search delimeter (`?`)</span>\n  <span class=\"hljs-comment\">// x -&gt; { search: &#x27;?&#x27;, hash: &#x27;&#x27; }</span>\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;?&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;/path&#x27;</span>,              <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">&#x27;/path?&#x27;</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;?&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;/path#foo&#x27;</span>,          <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">&#x27;/path?&#x27;</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;?&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;/path?id=foo&#x27;</span>,       <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">&#x27;/path?&#x27;</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;?&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;/path/&#x27;</span>,             <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">&#x27;/path/?&#x27;</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;?&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;/path/?id=foo#bar&#x27;</span>,  <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">&#x27;/path/?&#x27;</span> },\n  { <span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&#x27;?&#x27;</span>, <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;/index.html#foo&#x27;</span>,    <span class=\"hljs-attr\">resolves_to</span>: <span class=\"hljs-string\">&#x27;/index.html?&#x27;</span>}\n];\n\n<span class=\"hljs-keyword\">const</span> assertions_evaluated = assertions.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ href, location, resolves_to }</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> domain = <span class=\"hljs-string\">&#x27;https://example.com&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> expected = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(href, domain + location).<span class=\"hljs-title function_\">toString</span>();\n  <span class=\"hljs-keyword\">const</span> received = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(domain + resolves_to).<span class=\"hljs-title function_\">toString</span>();\n  <span class=\"hljs-keyword\">return</span> {\n    href,\n    location,\n    <span class=\"hljs-attr\">expected</span>: expected.<span class=\"hljs-title function_\">replace</span>(domain, <span class=\"hljs-string\">&#x27;&#x27;</span>),\n    <span class=\"hljs-attr\">received</span>: received.<span class=\"hljs-title function_\">replace</span>(domain, <span class=\"hljs-string\">&#x27;&#x27;</span>),\n    <span class=\"hljs-attr\">passed</span>: expected === received\n  };\n});\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">table</span>(assertions_evaluated);\n</code></pre>\n\n    <hr />\n    \n\n    <p>\n      Reply via:\n      \n\n      <a\n        href=\"mailto:jimniels%2Bblog@gmail.com?subject=Re:%20blog.jim-nielsen.com/2025/href-value-possibilities/\"\n        >Email</a\n      >\n      · <a href=\"https://mastodon.social/@jimniels\">Mastodon</a> ·\n\n      <a href=\"https://bsky.app/profile/jim-nielsen.com\">Bluesky</a>\n    </p>\n\n    \n  "
    },
    {
      "id": "/2025/how-to-make-websites-that-require-lots-of-time-and-energy/",
      "date_published": "2025-07-27T19:00:00Z",
      "title": "How to Make Websites That Will Require Lots of Your Time and Energy",
      "url": "https://blog.jim-nielsen.com/2025/how-to-make-websites-that-require-lots-of-time-and-energy/",
      "tags": [],
      "content_html": "<p>Some lessons I’ve learned from experience.</p>\n<h2 id=\"1-install-stuff-indiscriminately-from-npm\">1. Install Stuff Indiscriminately From npm</h2>\n<p>Become totally <a href=\"https://blog.jim-nielsen.com/2025/be-mindful-of-what-you-make-easy/\" >dependent on others</a>, that’s why they call them “dependencies” after all! Lean in to it.</p>\n<p>Once your dependencies break — and they will, time breaks all things — then you can spend lots of time and energy (which was your goal from the beginning) ripping out those dependencies and replacing them with new dependencies that will break later. </p>\n<p>Why rip them out? Because you can’t fix them. You don’t even know how they work, that’s why you introduced them in the first place!</p>\n<p>Repeat ad nauseam (that is, until you decide you don’t want to make websites that require lots of your time and energy, but that’s not your goal if you’re reading this article).</p>\n<h2 id=\"2-pick-a-framework-before-you-know-you-need-one\">2. Pick a Framework Before You Know You Need One</h2>\n<p>Once you hitch your wagon to a framework (a dependency, see above) then any updates to your site via the framework require that you first understand what changed in the framework.</p>\n<p>More of your time and energy expended, mission accomplished!</p>\n<h2 id=\"3-always-always-require-a-compilation-step\">3. Always, Always Require a Compilation Step</h2>\n<p>Put a critical dependency between working on your website and  using it in the browser. You know, some mechanism that is required to function before you can even see your website — like a complication step or build process. The bigger and more complex, the better.</p>\n<p>This is a great way to spend lots of time and energy working on your website.</p>\n<p>(Well, technically it’s not really working on your website. It’s working on the thing that spits out your website. So you’ll excuse me for recommending something that requires your time and energy that isn’t your website — since that’s not the stated goal — but trust me, this apparent diversion will directly affect the overall amount of time and energy you spend making a website. So, ultimately, it will still help you reach our stated goal.)</p>\n<p>Requiring that the code you write be transpiled, compiled, parsed, and evaluated before it can be used in your website is a great way to spend extra time and energy making a website (as opposed to, say, <a href=\"https://blog.jim-nielsen.com/2020/cheating-entropy-with-native-web-tech/\" >writing code as it will be run</a> which would save you time and energy and is not our goal here).</p>\n<h2 id=\"more\">More?</h2>\n<p>Do you have more advice on building a website that will require a lot of your time and energy? Share your recommendations with others, in case they’re looking for such advice.</p>\n\n    <hr />\n    \n\n    <p>\n      Reply via:\n      \n\n      <a\n        href=\"mailto:jimniels%2Bblog@gmail.com?subject=Re:%20blog.jim-nielsen.com/2025/how-to-make-websites-that-require-lots-of-time-and-energy/\"\n        >Email</a\n      >\n      · <a href=\"https://mastodon.social/@jimniels\">Mastodon</a> ·\n\n      <a href=\"https://bsky.app/profile/jim-nielsen.com\">Bluesky</a>\n    </p>\n\n    \n  "
    },
    {
      "id": "/2025/occupation-and-preoccupation/",
      "date_published": "2025-07-17T19:00:00Z",
      "title": "Occupation and Preoccupation",
      "url": "https://blog.jim-nielsen.com/2025/occupation-and-preoccupation/",
      "tags": [],
      "content_html": "<p>Here’s <a href=\"https://www.youtube.com/watch?v=wLb9g_8r-mE\" >Jony Ive in his Stripe interview</a>:</p>\n<blockquote>\n<p>What we make stands testament to who we are. What we make describes our values. It describes our preoccupations. It describes beautiful succinctly our preoccupation.</p>\n</blockquote>\n<p>I’d never really noticed the connection between these two words: occupation and preoccupation.</p>\n<p>What comes before occupation? Pre-occupation.</p>\n<p>What comes before what you do for a living? What you think about. What you’re preoccupied with.</p>\n<p>What you think about will drive you towards what you work on.</p>\n<p>So when you’re asking yourself, “What comes next? What should I work on?”</p>\n<p>Another way of asking that question is, “What occupies my thinking right now?”</p>\n<p>And if what you’re occupied with doesn’t align with what you’re preoccupied with, perhaps it&#39;s time for a change.</p>\n\n    <hr />\n    \n\n    <p>\n      Reply via:\n      \n\n      <a\n        href=\"mailto:jimniels%2Bblog@gmail.com?subject=Re:%20blog.jim-nielsen.com/2025/occupation-and-preoccupation/\"\n        >Email</a\n      >\n      · <a href=\"https://mastodon.social/@jimniels\">Mastodon</a> ·\n\n      <a href=\"https://bsky.app/profile/jim-nielsen.com\">Bluesky</a>\n    </p>\n\n    \n  "
    },
    {
      "id": "/2025/measurement-and-numbers/",
      "date_published": "2025-07-14T19:00:00Z",
      "title": "Measurement and Numbers",
      "url": "https://blog.jim-nielsen.com/2025/measurement-and-numbers/",
      "tags": [],
      "content_html": "<p>Here’s <a href=\"https://www.youtube.com/watch?v=wLb9g_8r-mE\" >Jony Ive talking to Patrick Collison</a> about measurement and numbers:</p>\n<blockquote>\n<p>People generally want to talk about product attributes that you can measure easily with a number…schedule, costs, speed, weight, anything where you can generally agree that six is a bigger number than two</p>\n</blockquote>\n<p>He says he used to get mad at how often people around him focused on the numbers of the work over other attributes of the work. </p>\n<p>But after giving it more thought, he now has a more generous interpretation of why we do this: because we want relate to each other, understand each other, and be inclusive of one another.  There are many things we can’t agree on, but it’s likely we <em>can</em> agree that six is bigger than two. And so in this capacity, numbers become a tool for communicating with each other, albeit a kind of least common denominator — e.g. “I don’t agree with you at all, but I can’t argue that 134 is bigger than 87.”</p>\n<p>This is conducive to a culture where we spend all our time talking about attributes we can easily measure (because then we can easily communicate and work together) and results in a belief that the only things that matter are those which can be measured.</p>\n<p>People will give lip service to that not being the case, e.g. “We know there are things that can’t be measured that are important.” But the reality ends up being: only that which can be assigned a number gets managed, and that which gets managed is imbued with importance because it is allotted our time, attention, and care.</p>\n<p>This reminds me of the story of <a href=\"https://en.wikipedia.org/wiki/Judgement_of_Solomon\" >the judgement of King Solomon</a>,  an archetypal story found in cultures around the world. Here’s the story as summarized on Wikipedia:</p>\n<blockquote>\n<p>Solomon ruled between two women who both claimed to be the mother of a child. Solomon ordered the baby be cut in half, with each woman to receive one half. The first woman accepted the compromise as fair, but the second begged Solomon to give the baby to her rival, preferring the baby to live, even without her. Solomon ordered the baby given to the second woman, as her love was selfless, as opposed to the first woman&#39;s selfish disregard for the baby&#39;s actual well-being</p>\n</blockquote>\n<p>In an attempt to resolve the friction between two individuals, an appeal was made to numbers as an arbiter. We can’t agree on who the mother is, so let’s make it a numbers problem. Reduce the baby to a number and we can agree!</p>\n<p>But that doesn’t work very well, does it?</p>\n<p>I think there is a level of existence where measurement and numbers are a sound guide, where two and two make four and two halves make a whole.</p>\n<p>But, as humans, there is another level of existence where mathematical propositions don’t translate. A baby is not a quantity. A baby is an entity. Take a whole baby and divide it up by a sword and you do not half two halves of a baby.</p>\n<p>I am not a number. I’m an individual. Indivisible. </p>\n<p>What does this all have to do with software? Software is for us as humans, as individuals, and because of that I believe there is an aspect of its nature where metrics can’t take you.cIn fact, not only will numbers <em>not</em> guide you, they may actually <em>misguide</em> you.</p>\n<p>I think Robin Rendle articulated this well in his piece <a href=\"https://robinrendle.com/notes/trust-the-vibes/\" >“Trust the vibes”</a>:</p>\n<blockquote>\n<p>[numbers] are not representative of human experience or human behavior and can’t tell you anything about beauty or harmony or how to be funny or what to do next and then how to do it.</p>\n</blockquote>\n<p>Wisdom is knowing when to use numbers and when to use something else.</p>\n\n    <hr />\n    \n\n    <p>\n      Reply via:\n      \n\n      <a\n        href=\"mailto:jimniels%2Bblog@gmail.com?subject=Re:%20blog.jim-nielsen.com/2025/measurement-and-numbers/\"\n        >Email</a\n      >\n      · <a href=\"https://mastodon.social/@jimniels\">Mastodon</a> ·\n\n      <a href=\"https://bsky.app/profile/jim-nielsen.com\">Bluesky</a>\n    </p>\n\n    \n  "
    },
    {
      "id": "/2025/computers-are-a-feeling/",
      "date_published": "2025-07-10T19:00:00Z",
      "title": "Computers Are a Feeling",
      "url": "https://blog.jim-nielsen.com/2025/computers-are-a-feeling/",
      "tags": [],
      "content_html": "<p>Exploring <a href=\"https://diagram.website\" >diagram.website</a>, I came across <a href=\"https://github.com/timhwang/nyrc/blob/main/NYRC%201%20-%20The%20Computer%20is%20a%20Feeling.md\" >The Computer is a Feeling</a> by Tim Hwang and Omar Rizwan:</p>\n<blockquote>\n<p> the modern internet exerts a tyranny over our imagination. The internet and its commercial power has sculpted the computer-device. It&#39;s become the terrain of flat, uniform, common platforms and protocols, not eccentric, local, idiosyncratic ones. </p>\n</blockquote>\n<p>Before computers were connected together, they were primarily personal. Once connected, they became primarily social. The purpose of the computer shifted to become social <em>over</em> personal.</p>\n<blockquote>\n<p>The triumph of the internet has also impoverished our sense of computers as a tool for private exploration rather than public expression. The pre-network computer has no utility except as a kind of personal notebook, the post-network computer demotes this to a secondary purpose.</p>\n</blockquote>\n<p>Smartphones are indisputably <em>the</em> personal computer. And yet, while being so intimately personal, they’re also the largest distribution of behavior-modification devices the world has ever seen. We all <em>willing</em> carry around in our pockets a device whose content is largely designed to modify our behavior and extract our time and money.</p>\n<blockquote>\n<p>Making “computer” mean computer-feelings and not computer-devices shifts the boundaries of what is captured by the word. It removes a great many things – smartphones, language models, “social” “media” – from the domain of the computational. It also welcomes a great many things – notebooks, papercraft, diary, kitchen – back into the domain of the computational.</p>\n</blockquote>\n<p>I love the feeling of a personal computer, one whose purpose primarily resides in the domain of the individual and  secondarily supports the social. It’s part of what I love about the some of the ideas embedded in <a href=\"https://localfirstweb.dev\" >local-first</a>, which start from the principle of owning and prioritizing what you do on your computer first and foremost, and then secondarily syncing that to other computers for the use of others.</p>\n\n    <hr />\n    \n\n    <p>\n      Reply via:\n      \n\n      <a\n        href=\"mailto:jimniels%2Bblog@gmail.com?subject=Re:%20blog.jim-nielsen.com/2025/computers-are-a-feeling/\"\n        >Email</a\n      >\n      · <a href=\"https://mastodon.social/@jimniels\">Mastodon</a> ·\n\n      <a href=\"https://bsky.app/profile/jim-nielsen.com\">Bluesky</a>\n    </p>\n\n    \n  "
    },
    {
      "id": "/2025/youtube-links-from-whgov-wire/",
      "date_published": "2025-07-07T19:00:00Z",
      "title": "Follow Up: An Analysis of YouTube Links From The White House’s “Wire” Website",
      "url": "https://blog.jim-nielsen.com/2025/youtube-links-from-whgov-wire/",
      "tags": [],
      "content_html": "<p>After publishing my <a href=\"https://blog.jim-nielsen.com/2025/links-from-whgov-wire/\" >Analysis of Links From The White House’s “Wire” Website</a>, Tina Nguyen, political correspondent at <em>The Verge</em>, reached out with some questions.</p>\n<p>Her questions made me realize that the numbers in my analysis weren’t quite correct (I wasn’t de-depulicating links across days, so <a href=\"https://blog.jim-nielsen.com/2025/links-from-whgov-wire/#update-2025-07-03\" >I fixed that problem</a>).</p>\n<p>More pointedly, she asked about the most popular domain the White House was linking to: YouTube. Specifically, were the links to YouTube 1) independent content creators, 2) the White House itself, or 3) a mix. </p>\n<p>A great question. I didn’t know the answer but wanted to find out. A little JavaScript code in my spreadsheet and boom, I had all the YouTube links in one place.</p>\n<p class=\"image-container\"><img src=\"https://cdn.jim-nielsen.com/blog/2025/whwire-followup-youtube-links.png\" width=\"851\" height=\"1024\" alt=\"Screenshot of a table of data in a spreadsheet showing all the links to YouTube from wh[dot]gov/wire\" />\n\n</p><p>I couldn’t really discern from the links themselves what I was looking at. A number of them were to the <code>/live/</code> subpath, meaning I was looking at links to live streaming events. But most of the others were YouTube’s standard <code>/watch?v=:id</code> which leaves the content and channel behind the URL opaque. The only real way to know was to click through to each one.</p>\n<p>I did a random sampling and found most of the ones I clicked on all went to The White House’s own YouTube channel. I told Tina as much, sent here the data I had, and <a href=\"https://www.theverge.com/politics/698148/white-house-wire-youtube\" >she reported on it in an article at <em>The Verge</em></a>.</p>\n<p>Tina’s question did get me wondering: <em>precisely</em> how many of those links are to the White House’s own YouTube channel vs. other content creators?</p>\n<p>Once again, writing scripts that process data, talk to APIs, and put it all into 2-dimensional tables in a spreadsheet was super handy. </p>\n<p>I looked at all the YouTube links, extracted the video ID, then queried the YouTube API for information about the video (like what channel it belongs to). Once I had the script working as expected for a single cell, it was easy to do the spreadsheet thing where you just “drag down” to autocomplete all the other cells with video IDs.</p>\n<p class=\"image-container\"><img src=\"https://cdn.jim-nielsen.com/blog/2025/whwire-followup-dragdown.gif\" width=\"480\" height=\"200\" alt=\"Animated gif of a mouse cursor dragging down the cell cursor in a spreadsheet and data being fetched (from an API) and populated in spreadsheet cells\" />\n\n</p><p>The result?</p>\n<p>From May 8th to July 6th there were 78 links to YouTube from <code>wh.gov/wire</code>, which breaks down as follows:</p>\n<ul>\n<li>73 links to videos on the White House’s own YouTube channel</li>\n<li>2 links to videos on the channel “Department of Defense”</li>\n<li>1 link to a video on the channel “Pod Force One with Miranda Devine”</li>\n<li>1 link to a video on the channel “Breitbart News”</li>\n<li>1 link to <a href=\"https://www.youtube.com/watch?v=2g8HctzQCIo\" >a video</a> that has since been taken down “due to a copyright claim by Sony Music Publishing” (so I’m not sure whose channel that was)</li>\n</ul>\n<p class=\"image-container\"><img src=\"https://cdn.jim-nielsen.com/blog/2025/whwire-followup-piechart.png\" width=\"559\" height=\"336\" alt=\"Pie chart showing the percentage distribution of data points among four sources: The White House (94.7%, shown in blue), Department of Defense (2.63%, red), Pod Force One with Miranda Devine (1.32%, green), and Breitbart News (1.32%, purple).\" />\n\n</p>\n    <hr />\n    \n\n    <p>\n      Reply via:\n      \n\n      <a\n        href=\"mailto:jimniels%2Bblog@gmail.com?subject=Re:%20blog.jim-nielsen.com/2025/youtube-links-from-whgov-wire/\"\n        >Email</a\n      >\n      · <a href=\"https://mastodon.social/@jimniels\">Mastodon</a> ·\n\n      <a href=\"https://bsky.app/profile/jim-nielsen.com\">Bluesky</a>\n    </p>\n\n    \n  "
    },
    {
      "id": "/2025/do-you-personalize/",
      "date_published": "2025-07-06T19:00:00Z",
      "title": "Do You Even Personalize, Bro?",
      "url": "https://blog.jim-nielsen.com/2025/do-you-personalize/",
      "tags": [],
      "content_html": "<p>There’s a video on YouTube from “Technology Connections” — who I’ve never heard of or watched until now — called <a href=\"https://www.youtube.com/watch?v=QEJpZjg8GuA\" >Algorithms are breaking how we think</a>. I learned of this video from <a href=\"https://mastodon.social/@gedeonm\" >Gedeon Maheux</a> of <a href=\"https://iconfactory.com\" ><em>The Iconfactory</em></a> fame. Speaking in the context of why they made <a href=\"https://usetapestry.com\" >Tapestry</a>, he said the ideas in this video would be their manifesto.</p>\n<p>So I gave it a watch.</p>\n<p>Generally speaking, the video asks: Does anyone care to have a self-directed experience online, or with a computer more generally?</p>\n<blockquote>\n<p>I&#39;m not sure how infrequently we’re actually deciding for ourselves these days [how we decide what we want to see, watch, and do on the internet]</p>\n</blockquote>\n<p>Ironically we spend <em>more</em> time than ever on computing devices, but <em>less</em> time than ever curating our own experiences with them.</p>\n<p>Which — again ironically — is <em>the inverse</em> of many things in our lives.</p>\n<p>Generally speaking, the more time we spend with something, the more we invest in making it our own — customizing it to our own idiosyncrasies.</p>\n<p>But how much time do you spend curating, customizing, and personalizing your digital experience? (If you’re reading this in an RSS reader, high five!)</p>\n<p>I’m not talking about “I liked that post, or saved that video, so the algorithm is personalizing things for me”.</p>\n<p>Do <em>you</em> know what to get yourself more of?</p>\n<p>Do you know where to find it?</p>\n<p>Do you even ask yourself these questions?</p>\n<p>“That sounds like too much work” you might say. </p>\n<p>And you’re right, it is work. As the guy in the video says:</p>\n<blockquote>\n<p>I&#39;m one of those weirdos who think the most rewarding things in life take effort</p>\n</blockquote>\n<p>Me too.</p>\n\n    <hr />\n    \n\n    <p>\n      Reply via:\n      \n\n      <a\n        href=\"mailto:jimniels%2Bblog@gmail.com?subject=Re:%20blog.jim-nielsen.com/2025/do-you-personalize/\"\n        >Email</a\n      >\n      · <a href=\"https://mastodon.social/@jimniels\">Mastodon</a> ·\n\n      <a href=\"https://bsky.app/profile/jim-nielsen.com\">Bluesky</a>\n    </p>\n\n    \n  "
    },
    {
      "id": "/2025/element-ordering-edge-function-html-rewriter/",
      "date_published": "2025-07-02T19:00:00Z",
      "title": "Setting Element Ordering With HTML Rewriter Using CSS",
      "url": "https://blog.jim-nielsen.com/2025/element-ordering-edge-function-html-rewriter/",
      "tags": ["css", "html"],
      "content_html": "<p>After shipping my work <a href=\"https://blog.jim-nielsen.com/2025/transform-html-with-edge-functions/\" >transforming HTML with Netlify’s edge functions</a> I realized I have a little bug: the order of the icons specified in the URL doesn’t match the order in which they are displayed on screen.</p>\n<p>Why’s this happening?</p>\n<p>I have a bunch of links in my HTML document, like this:</p>\n<pre><code class=\"language language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">icon-list</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/1/&quot;</span>&gt;</span>…<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/2/&quot;</span>&gt;</span>…<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/3/&quot;</span>&gt;</span>…<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- 2000+ more --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">icon-list</span>&gt;</span>\n</code></pre>\n<p>I use <a href=\"https://github.com/worker-tools/html-rewriter\" >html-rewriter</a> in my edge function to strip out the HTML for icons not specified in the URL. So for a request to:</p>\n<p><code>/lookup?id=1&amp;id=2</code></p>\n<p>My HTML will be transformed like so:</p>\n<pre><code class=\"language language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">icon-list</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- Parser keeps these two --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/1/&quot;</span>&gt;</span>…<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/2/&quot;</span>&gt;</span>…<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n  \n  <span class=\"hljs-comment\">&lt;!-- But removes this one --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/3/&quot;</span>&gt;</span>…<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">icon-list</span>&gt;</span>\n</code></pre>\n<p>Resulting in less HTML over the wire to the client.</p>\n<p>But what about <em>the order</em> of the IDs in the URL? What if the request is to:</p>\n<p><code>/lookup?id=2&amp;id=1</code></p>\n<p>Instead of:</p>\n<p><code>/lookup?id=1&amp;id=2</code></p>\n<p>In the source HTML document containing <em>all</em> the icons, they’re marked up in reverse chronological order. But the request for this page may specify a different order for icons in the URL. So how do I rewrite the HTML to match the URL’s ordering?</p>\n<p>The problem is that html-rewriter doesn’t give me a fully-parsed DOM to work with. I can’t do things like “move this node to the top” or “move this node to position <code>x</code>”.</p>\n<p>With html-rewriter, you only “see” each element as it streams past. Once it passes by, your chance at modifying it is gone. (It seems that’s just the way these edge function tools are designed to work, keeps them lean and performant and I can’t shoot myself in the foot).</p>\n<p>So how do I change the icon’s display order to match what’s in the URL if I can’t modify the order of the elements in the HTML?</p>\n<p>CSS to the rescue!</p>\n<p>Because my markup is just a bunch of <code>&lt;a&gt;</code> tags inside a custom element and I’m using CSS grid for layout, I can use the <code>order</code> property in CSS!</p>\n<p>All the IDs are in the URL, and their position as parameters has meaning, so I assign their ordering to each element as it passes by html-rewriter. Here’s some pseudo code:</p>\n<pre><code class=\"language language-js\"><span class=\"hljs-comment\">// Get all the IDs in the URL</span>\n<span class=\"hljs-keyword\">const</span> ids = url.<span class=\"hljs-property\">searchParams</span>.<span class=\"hljs-title function_\">getAll</span>(<span class=\"hljs-string\">&quot;id&quot;</span>);\n\n<span class=\"hljs-comment\">// Select all the icons in the HTML</span>\nrewriter.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&quot;icon-list a&quot;</span>, {\n  <span class=\"hljs-attr\">element</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">element</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// Get the ID</span>\n    <span class=\"hljs-keyword\">const</span> id = element.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;id&#x27;</span>);\n    \n    <span class=\"hljs-comment\">// If it&#x27;s in our list, set it&#x27;s order</span>\n    <span class=\"hljs-comment\">// position from the URL</span>\n    <span class=\"hljs-keyword\">if</span> (ids.<span class=\"hljs-title function_\">includes</span>(id)) {\n      <span class=\"hljs-keyword\">const</span> order = ids.<span class=\"hljs-title function_\">indexOf</span>(id);\n      element.<span class=\"hljs-title function_\">setAttribute</span>(\n        <span class=\"hljs-string\">&quot;style&quot;</span>,\n        <span class=\"hljs-string\">`order: <span class=\"hljs-subst\">${order}</span>`</span>\n      );\n    <span class=\"hljs-comment\">// Otherwise, remove it</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      element.<span class=\"hljs-title function_\">remove</span>();\n    }\n  },\n});\n</code></pre>\n<p>Boom! I didn’t have to change the order in the source HTML document, but I can still get the displaying ordering to match what’s in the URL.</p>\n<p>I love shifty little workarounds like this!</p>\n\n    <hr />\n    \n\n    <p>\n      Reply via:\n      \n\n      <a\n        href=\"mailto:jimniels%2Bblog@gmail.com?subject=Re:%20blog.jim-nielsen.com/2025/element-ordering-edge-function-html-rewriter/\"\n        >Email</a\n      >\n      · <a href=\"https://mastodon.social/@jimniels\">Mastodon</a> ·\n\n      <a href=\"https://bsky.app/profile/jim-nielsen.com\">Bluesky</a>\n    </p>\n\n    \n  "
    }
  ]
}
